# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import inventory_service_pb2 as inventory__service__pb2


class InventoryServiceStub(object):
    """The inventory service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProductQuantity = channel.unary_unary(
                '/ordermgt.InventoryService/GetProductQuantity',
                request_serializer=inventory__service__pb2.ProductType.SerializeToString,
                response_deserializer=inventory__service__pb2.Quantity.FromString,
                )
        self.GetStockSummary = channel.stream_unary(
                '/ordermgt.InventoryService/GetStockSummary',
                request_serializer=inventory__service__pb2.ProductType.SerializeToString,
                response_deserializer=inventory__service__pb2.StockSummary.FromString,
                )


class InventoryServiceServicer(object):
    """The inventory service definition.
    """

    def GetProductQuantity(self, request, context):
        """Get the available quantity of a product in the warehouse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockSummary(self, request_iterator, context):
        """Accepts a stream of ProductTypes, returning a StockSummary when aggregation is completed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InventoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProductQuantity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProductQuantity,
                    request_deserializer=inventory__service__pb2.ProductType.FromString,
                    response_serializer=inventory__service__pb2.Quantity.SerializeToString,
            ),
            'GetStockSummary': grpc.stream_unary_rpc_method_handler(
                    servicer.GetStockSummary,
                    request_deserializer=inventory__service__pb2.ProductType.FromString,
                    response_serializer=inventory__service__pb2.StockSummary.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ordermgt.InventoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InventoryService(object):
    """The inventory service definition.
    """

    @staticmethod
    def GetProductQuantity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ordermgt.InventoryService/GetProductQuantity',
            inventory__service__pb2.ProductType.SerializeToString,
            inventory__service__pb2.Quantity.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockSummary(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ordermgt.InventoryService/GetStockSummary',
            inventory__service__pb2.ProductType.SerializeToString,
            inventory__service__pb2.StockSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
